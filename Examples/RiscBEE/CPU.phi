namespace RiscBEE {
    module CPU(
        clk: @clock Input,
        rst: @reset Input[31..0],
        romout: Input[31..0],

        memwrite: Output,
        memin: Output[31..0],
        memaddr: Output[31..0],
        romaddr: Output[31..0],
        iobytes: Output[3..0]
    ) {
        Wire Z, C, N, V;
        Wire[4..0] rs1, rs2, rd;
        Wire[3..0] alu_op;
        Wire r, uj, u, u_control, i, s, sb;
        Wire load_pc, mem_read, mem_read_sext, imm_sext;

        memwrite = s;
        memaddr = o;

        Register[31..0] addr = 32b0;
        addr.data = addr &+ next_addr;

        DataPath dp(pc: romaddr, clk: clk, memin: memin, next_addr: next_addr,  rst: rst, rs1: rs1, rs2: rs2, rd: rd, alu_op: alu_op, imm_uj: imm_uj, imm_u: imm_u, imm_i: imm_i, imm_s: imm_s, imm_sb: imm_sb, memout: memout, o: o, r: r, uj: uj, u: u, u_control: u_control, i: i, s: s, sb: sb, load_pc: load_pc, mem_read: mem_read, mem_read_sext: mem_read_sext, iobytes: iobytes, Z: Z, C: C, N: N, V: V, imm_sext: imm_sext);

        Decoder dc(word: romout, Z: Z, C: C, N: N, V: V, rs1: rs1, rs2: rs2, rd: rd, alu_op: alu_op, imm_uj: imm_uj, imm_u: imm_u, imm_i: imm_i, imm_s: imm_s, imm_sb: imm_sb, r: r, uj: uj, u: u, u_control: u_control, i: i, s: s, sb: sb, load_pc: load_pc, mem_read: mem_read, mem_read_sext: mem_read_sext, iobytes: iobytes, imm_sext: imm_sext);

    }
}